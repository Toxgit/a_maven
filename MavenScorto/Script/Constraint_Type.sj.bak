//USEUNIT MainMenu
//USEUNIT OpenStrHelper
//USEUNIT Settings
//USEUNIT VariablesHelper


function Constraint_Type()
{
  //initialization
  var testStrategyPath =  strLocation + "Constraint.strat";
  var toolbar = new Toolbar.Toolbar();
  var variables = new Variables.Variables();
  var selectConstraint = new SelectConstraint.SelectConstraint();
  
  
  
  //precondition
  /*openStrByPath(testStrategyPath);
  toolbar.variables();  */
  
  //test bodys 
  Log.Message("Тест проверяет соответствее типов переменной и constraint");
    
  for (var i=0;i<variables.list.wRowCount; i++)
  {
    clickRowByIndex(variables,i);
    var type = getPropertyValue("Type");
    var linked = getPropertyLinked("", i)
    if((type == "Numeric")||(type == "NumericColumn"))
    {
      chooseProperty("Constraint name");
      variables.toSelectConstraint();
      filterList(selectConstraint, "Type", "str");
      checkEmptyList(selectConstraint);
      selectConstraint.cancel();
    }
    if(((type == "String")||(type == "StringColumn"))&&(linked != "Yes"))
    {
      chooseProperty("Constraint name");
      variables.toSelectConstraint();
      filterList(selectConstraint, "Type", "num");
      checkEmptyList(selectConstraint);
      selectConstraint.cancel();
    }
  }
  
  //postcondition
  variables.ok();
  toolbar.close();
}